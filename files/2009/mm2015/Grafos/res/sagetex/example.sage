## This file (example.sage) was *autogenerated* from the file example.tex.
import sagetex
_st_ = sagetex.SageTeXProcessor('example')
try:
 _st_.inline(0, 2+2)
except:
 _st_.goboom(30)
try:
 _st_.inline(1, mod(2009, 100))
except:
 _st_.goboom(31)
try:
 _st_.inline(2, Integer(mod(2009, 100))^27)
except:
 _st_.goboom(33)
try:
 _st_.inline(3, 2009%42)
except:
 _st_.goboom(34)
_st_.blockbegin()
try:
  1+1
  var('a,b,c')
  eqn = [a+b*c==1, b-a*c==0, a+b==5]
  s = solve(eqn, a,b,c)
except:
 _st_.goboom(42)
_st_.blockend()
try:
 _st_.inline(4, eqn)
except:
 _st_.goboom(44)
try:
 _st_.inline(5, s[0])
except:
 _st_.goboom(46)
try:
 _st_.inline(6, s[1])
except:
 _st_.goboom(49)
_st_.blockbegin()
try:
 E = EllipticCurve("37a")
except:
 _st_.goboom(55)
_st_.blockend()
try:
 _st_.inline(7, E)
except:
 _st_.goboom(58)
try:
 _st_.inline(8, E.discriminant())
except:
 _st_.goboom(59)
_st_.blockbegin()
try:
 try:
     E = load('E2')
 except IOError:
     E = EllipticCurve([1,2,3,4,5])
     E.anlist(100000)
     E.save('E2')
except:
 _st_.goboom(70)
_st_.blockend()
try:
 _st_.inline(9, E)
except:
 _st_.goboom(72)
try:
 _st_.inline(10, E.anlist(100000)[9999])
except:
 _st_.goboom(73)
_st_.blockbegin()
try:
   e = 2
   e = 3*e + 1
except:
 _st_.goboom(79)
_st_.blockend()
try:
 _st_.inline(11, e)
except:
 _st_.goboom(80)
_st_.blockbegin()
try:
   var('x')
   f(x) = log(sin(x)/x)
except:
 _st_.goboom(85)
_st_.blockend()
try:
 _st_.inline(12,  f.taylor(x, 0, 10) )
except:
 _st_.goboom(86)
try:
 _st_.plot(0, format='notprovided', _p_=E.plot(-3,3))
except:
 _st_.goboom(92)
_st_.blockbegin()
try:
   # the var line is unecessary unless you've defined x to be something
   # other than a symbolic variable
   var('x')
   f(x) = -x^3+3*x^2+7*x-4
except:
 _st_.goboom(99)
_st_.blockend()
_st_.blockbegin()
try:
   p = plot(f, x, -5, 5)
except:
 _st_.goboom(104)
_st_.blockend()
try:
 _st_.plot(1, format='notprovided', _p_=p)
except:
 _st_.goboom(108)
try:
 _st_.plot(2, format='notprovided', _p_=p, axes=False)
except:
 _st_.goboom(113)
_st_.blockbegin()
try:
 f = maxima('sin(x)^2*exp(x)')
 g = f.integrate('x')
except:
 _st_.goboom(120)
_st_.blockend()
_st_.blockbegin()
try:
   # g is a Maxima thingy, it needs to get converted into a Sage object
   plot1 = plot(g.sage(),x,-1,2*pi)
except:
 _st_.goboom(125)
_st_.blockend()
try:
 _st_.plot(3, format='png', _p_=plot1)
except:
 _st_.goboom(131)
try:
 _st_.plot(4, format='notprovided', _p_=plot1 + plot(f.sage(),x,-1,2*pi,rgbcolor=hue(0.4)), figsize=[1,2])
except:
 _st_.goboom(141)
try:
 _st_.plot(5, format='notprovided', _p_=graphs.FlowerSnark().plot())
except:
 _st_.goboom(144)
_st_.blockbegin()
try:
 G4 = DiGraph({1:[2,2,3,5], 2:[3,4], 3:[4], 4:[5,7], 5:[6]},\
              multiedges=True)
 G4plot = G4.plot(layout='circular')
except:
 _st_.goboom(150)
_st_.blockend()
try:
 _st_.plot(6, format='notprovided', _p_=G4plot, axes=False)
except:
 _st_.goboom(152)
_st_.blockbegin()
try:
  s     = 7
  s2    = 2^s
  P.<x> = GF(2)[]
  M     = matrix(parent(x),s2)
  for i in range(s2):
     p  = (1+x)^i
     pc = p.coeffs()
     a  = pc.count(1)
     for j in range(a):
         idx        = pc.index(1)
         M[i,idx+j] = pc.pop(idx)
 
  matrixprogram = matrix_plot(M,cmap='Greys')
except:
 _st_.goboom(169)
_st_.blockend()
try:
 _st_.plot(7, format='notprovided', _p_=matrixprogram)
except:
 _st_.goboom(172)
try:
 _st_.inline(13, var('x'))
except:
 _st_.goboom(175)
_st_.blockbegin()
try:
   G = graphs.CubeGraph(5)
except:
 _st_.goboom(193)
_st_.blockend()
try:
 _st_.plot(8, format='png', _p_=G.plot3d(engine='tachyon'))
except:
 _st_.goboom(197)
print 'SageTeX paused on example.tex line 207'
"""
try:
 _st_.inline(14, factor(2^325 + 1))
except:
 _st_.goboom(209)
_st_.blockbegin()
try:
   import time
   time.sleep(15)
except:
 _st_.goboom(215)
_st_.blockend()
try:
 _st_.plot(9, format='notprovided', _p_=plot(2*sin(x^2) + x^2, (x, 0, 5)))
except:
 _st_.goboom(217)
"""
print 'SageTeX unpaused on example.tex line 219'
_st_.blockbegin()
try:
 def pascals_triangle(n):
   # start of the table
   s  = r"\begin{tabular}{cc|" + "r" * (n+1) + "}"
   s += r"  & & $k$: & \\"
   # second row, with k values:
   s += r"  & "
   for k in [0..n]:
     s += "& %d " % k
   s += r"\\"
   # the n = 0 row:
   s += r"\hline" + "\n" + r"$n$: & 0 & 1 & \\"
   # now the rest of the rows
   for r in [1..n]:
     s += " & %d " % r
     for k in [0..r]:
       s += "& %d " % binomial(r, k)
     s += r"\\"
   # add the last line and return
   s += r"\end{tabular}"
   return s
 
 # how big should the table be?
 n = 8
except:
 _st_.goboom(256)
_st_.blockend()
try:
 _st_.inline(15, pascals_triangle(n))
except:
 _st_.goboom(263)
_st_.endofdoc()
