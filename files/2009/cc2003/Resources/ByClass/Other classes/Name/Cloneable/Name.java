// 15.13public class Name extends ImmutableName implements Cloneable{	public Name()	{	} // end default constructor	public Name(String firstName, String lastName)	{		super.setName(firstName, lastName);	} // end constructor	public void setName(String firstName, String lastName)	{		super.setName(firstName, lastName);	} // end setName	public void setFirst(String firstName)	{		super.setFirst(firstName);	} // end setFirst	public void setLast(String lastName)	{		super.setLast(lastName);	} // end setLast	public void giveLastNameTo(Name aName)	{		aName.setLast(this.getLast()); // 'this' is optional	} // end giveLastNameTo	public ImmutableName getImmutable()	{		return new ImmutableName(getFirst(), getLast());	} // end getImmutable	public Object clone()	{		Name theCopy = null;		try		{			theCopy = (Name)super.clone();		}		catch (CloneNotSupportedException e)		{			System.err.println("Name cannot clone: " + e.toString());		}		return theCopy;	} // end clone// ALTERNATE CODE:/*	public Object clone()	{		try		{			Name theCopy = (Name) super.clone();			return theCopy;		}		catch (CloneNotSupportedException e)		{			throw new Error(e.toString()); // using throw avoids syntax			                               // error of missing return        }	} // end clone	*/} // end Name