public interface BinaryNodeInterface{	/** Task: Retrieves the data portion of the node.	 *  @return the object in the data portion of the node */	public Object getData();		/** Task: Sets the data portion of the node.     *  @param newData an object */	public void	setData(Object newData);		/** Task: Retrieves the left (right) child of the node.	 *  @return the node that is this node’s left (right) child */	public BinaryNodeInterface getLeftChild();	public BinaryNodeInterface getRightChild();		/** Task: Sets the node’s left child to a given node.	 * @param leftChild a node that will be the left child */	public void	setLeftChild(BinaryNodeInterface leftChild);		/** Task: Sets the node’s right child to a given node.	 *  @param rightChild a node that will be the right child */	public void	setRightChild(BinaryNodeInterface rightChild);		/** Task: Determines whether the node has a left (right) child.	 *  @return true if the node has a left (right) child */	public boolean hasLeftChild();	public boolean hasRightChild();		/** Task: Determines whether the node is a leaf.	 *  @return true if the node is a leaf */	public boolean isLeaf();} // end BinaryNodeInterface