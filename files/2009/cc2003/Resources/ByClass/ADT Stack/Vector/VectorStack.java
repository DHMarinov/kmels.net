import java.util.Vector;public class VectorStack implements StackInterface, java.io.Serializable{	private Vector stack; // top of stack is last element	public VectorStack()	{		stack = new Vector(); // vector doubles in size if necessary	} // end default constructor	public VectorStack(int maxSize)	{		stack = new Vector(maxSize);	} // end constructor		public void push(Object newEntry)	{		stack.addElement(newEntry);	} // end push	public Object pop()	{		Object top = null;		if (!isEmpty())		{			top = stack.lastElement();			stack.removeElementAt(stack.size()-1);		} // end if		return top;	} // end pop	public Object peek()	{		Object top = null;		if (!isEmpty())			top = stack.lastElement();		return top;	} // end peek	public boolean isEmpty()	{		return stack.isEmpty();	} // end isEmpty	public void clear()	{		stack.removeAllElements();	} // end clear	} // end VectorStack