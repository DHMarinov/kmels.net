public class LList implements ListInterface, Cloneable{	private Node firstNode; // reference to first node	private int  length;    // number of entries in list	public LList()	{		clear();	} // end default constructor		public Object clone()	{		LList theCopy = null;		try		{			theCopy = (LList) super.clone();		}		catch (CloneNotSupportedException e)		{			throw new Error(e.toString());		} // end try/catch		// copy underlying chain of nodes		if (firstNode == null) // if chain is empty 			theCopy.firstNode = null;		else		{			// make a copy of the first node			theCopy.firstNode = (Node)firstNode.clone();			// make a copy of the rest of chain			Node newRef = theCopy.firstNode;			Node oldRef = firstNode.getNextNode();			for (int count = 2; count <= length; count++)			{ 				// clone node and its data; link clone to new chain				newRef.setNextNode((Node)oldRef.clone());				newRef = newRef.getNextNode();				oldRef = oldRef.getNextNode();			} // end for		} // end if		return theCopy;	} // end clone		public boolean add(Listable newEntry)	{		Node newNode = new Node(newEntry);		if (isEmpty())			firstNode = newNode;		else                   // add to end of nonempty list		{			Node lastNode = getNodeAt(length);			lastNode.next = newNode; // make last node reference new node		} // end if		length++;		return true;	}  // end add	public boolean add(int newPosition, Listable newEntry) 	{		boolean isSuccessful = true;		if ((newPosition >= 1) && (newPosition <= length+1)) 		{			Node newNode = new Node(newEntry);			if (isEmpty() || (newPosition == 1)) // case 1			{				newNode.next = firstNode;				firstNode = newNode;			}			else            // case 2: newPosition > 1, list is not empty			{				Node nodeBefore = getNodeAt(newPosition-1);				Node nodeAfter = nodeBefore.next;				newNode.next = nodeAfter;				nodeBefore.next = newNode;			} // end if			length++;		}		else			isSuccessful = false;		return isSuccessful;	} // end add		public Listable remove(int givenPosition)	{		Listable result = null;             // return value		if (!isEmpty() && (givenPosition >= 1) && (givenPosition <= length))		{			if (givenPosition == 1)        // case 1: remove first entry			{				result = firstNode.data;     // save entry to be removed 				firstNode = firstNode.next;			}			else                           // case 2: givenPosition > 1			{				Node nodeBefore = getNodeAt(givenPosition-1);				Node nodeToRemove = nodeBefore.next;				Node nodeAfter = nodeToRemove.next;				nodeBefore.next = nodeAfter; // disconnect the node to be removed				result = nodeToRemove.data;  // save entry to be removed			}  // end if			length--;		} // end if		return result;                    // return removed entry, or null		                                  // if operation fails	}  // end remove		public final void clear()	{		firstNode = null;		length = 0;	} // end clear	public boolean replace(int givenPosition, Listable newEntry)	{		boolean isSuccessful = true;		if (!isEmpty() && (givenPosition >= 1) && (givenPosition <= length))		{			Node desiredNode = getNodeAt(givenPosition);			desiredNode.data = newEntry;		} 		else			isSuccessful = false;		return isSuccessful;	} // end replace	public Listable getEntry(int givenPosition)	{		Listable result = null;  // result to return		if (!isEmpty() && (givenPosition >= 1) && (givenPosition <= length))			result = getNodeAt(givenPosition).data;		return result;	} // end getEntry	public boolean contains(Listable anEntry)	{		boolean found = false;		Node currentNode = firstNode;		while (!found && (currentNode != null))			{			if (anEntry.equals(currentNode.data))				found = true;			else				currentNode = currentNode.next;		} // end while		return found;	} // end contains	public int getLength()	{		return length;	} // end getLength	public boolean isEmpty()	{		return length == 0;	} // end isEmpty			public boolean isFull()	{		return false;	} // end isFull		//  STUDENT EXCERCISE	public void display()	{		for (Node current = firstNode; current != null; current = current.next)			System.out.println(current.data);	} // end display	// ---------------private!----------------------------- 	/** Task: Returns a reference to the node at a given position.	 *  Precondition: List is not empty; 1 <= givenPosition <= length. */	private Node getNodeAt(int givenPosition)	{		Node currentNode = firstNode;		// traverse the list to locate the desired node		for (int counter = 1; counter < givenPosition; counter++)			currentNode = currentNode.next;		return currentNode;	} // end getNodeAt	private class Node implements Cloneable	{		private Listable data;		private Node     next;		private Node(Listable dataPortion)		{			data = dataPortion;			next = null;		} // end constructor		private Node(Listable dataPortion, Node nextNode)		{			data = dataPortion;			next = nextNode;		} // end constructor				private Object getData()		{			return data;		} // end getData				private void setData(Listable newData)		{			data = newData;		} // end setData				private Node getNextNode()		{			return next;		} // end getNextNode				private void setNextNode(Node nextNode)		{			next = nextNode;		} // end setNextNode				public Object clone()		{			Node theCopy = null;			try			{				theCopy = (Node)super.clone();			}			catch (CloneNotSupportedException e)			{				throw new Error(e.toString());			} // end try/catch			theCopy.data = (Listable)data.clone();			theCopy.next = null; // don't clone link; itâs set later			return theCopy;		} // end clone	} // end Node} // end LList