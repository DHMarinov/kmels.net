import java.util.NoSuchElementException;public class ExternalIterator implements IteratorInterface{	private ListInterface list;  // reference to list	private int currentPosition; // iterator position	public ExternalIterator(ListInterface aList)	{		list = aList;		currentPosition = 1;	} // end constructor		public Object getCurrent() throws NoSuchElementException	{		if (hasCurrent())			return list.getEntry(currentPosition);		else			throw new NoSuchElementException("getCurrent(): " + 		                                 "no current entry");	} // end getCurrent// EXERCISES:		public boolean hasCurrent()	{		return currentPosition <= list.getLength();	}  // end hasCurrent		public boolean advance()	{		currentPosition++;		return currentPosition <= list.getLength();	}  // end advance		public void reset()	{		currentPosition = 1;	}  // end reset		public void addAfterCurrent(Object newEntry)	                            throws NoSuchElementException	{		if (hasCurrent())			list.add(currentPosition+1, newEntry);		else			throw new NoSuchElementException("addAfterCurrent(): " + 		                                     "no current entry");	}  // end addAfterCurrent		public void removeCurrent() throws NoSuchElementException	{		if (hasCurrent())			list.remove(currentPosition);		else			throw new NoSuchElementException("removeCurrent(): " + 		                                     "no current entry");	}  // end removeCurrent	public void replaceCurrent(Object newEntry)	                           throws NoSuchElementException	{		if (hasCurrent())			list.replace(currentPosition, newEntry);		else			throw new NoSuchElementException("replaceCurrent(): " + 		                                     "no current entry");	}  // end replaceCurrent	} // end ExternalIterator