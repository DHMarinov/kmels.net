private class IteratorForLinkedList implements IteratorInterface{	private Node currentNode; // current node in iteration	private Node priorNode;   // node before the current node	public IteratorForLinkedList()	{		currentNode = firstNode;		priorNode = null;	} // end default constructor	public boolean hasCurrent()	{		return currentNode != null;	} // end hasCurrent		public Object getCurrent() throws NoSuchElementException	{		if (hasCurrent())			return currentNode.data; // or return currentNode.getData()		else			throw new NoSuchElementException("getCurrent(): " + 		                                 "no current entry");	} // end getCurrent		public void replaceCurrent(Object newEntry) throws NoSuchElementException	{		if (hasCurrent())			currentNode.data = newEntry;		else			throw new NoSuchElementException("replaceCurrent(): " +		      	  "no current entry");	} // end replaceCurrent		public boolean advance()	{		boolean result = false;		if (hasCurrent())		{			priorNode = currentNode;			currentNode = currentNode.next; 			result = hasCurrent();		}		return result;	} // end advance		public void removeCurrent() throws NoSuchElementException	{		if (hasCurrent())		{			length--;			if (priorNode == null) // current node is first in list			{				firstNode = currentNode.next;				currentNode = firstNode;			}			else                   // current node is not first in list			{				priorNode.next = currentNode.next;				currentNode = currentNode.next;			} // end if		}		else                     // no current node			throw new NoSuchElementException("removeCurrent(): " +		                                 "no current entry");	} // end removeCurrent		public void addAfterCurrent(Object newEntry) 	                            throws NoSuchElementException	{		if (hasCurrent())		{			Node newNode = new Node(newEntry);			newNode.next = currentNode.next;			currentNode.next = newNode;			length++;		}		else			throw new NoSuchElementException("addAfterCurrent(): " +		                                 "no current entry");	} // end addAfterCurrent.		public void reset()	{		currentNode = firstNode;		priorNode = null;	} // end reset} // end IteratorForLinkedList