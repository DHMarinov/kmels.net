	public Comparable add(Comparable newEntry)	{		ReturnObject oldEntry = new ReturnObject(null);		BinaryNode newRoot =			(BinaryNode)addNode(getRootNode(), newEntry, oldEntry);		setRootNode(newRoot);				return oldEntry.get();	} // end add		private BinaryNode addNode(BinaryNode rootNode, Comparable newEntry, ReturnObject oldEntry)	{		if (rootNode == null)			rootNode = new BinaryNode(newEntry);		else if (newEntry.compareTo(rootNode.getData()) < 0)		{			BinaryNode leftChild = (BinaryNode)rootNode.getLeftChild();			BinaryNode subtreeRoot = addNode(leftChild, newEntry, oldEntry);			rootNode.setLeftChild(subtreeRoot); 					rootNode = rebalance(rootNode);			}		else if (newEntry.compareTo(rootNode.getData()) > 0)		{			BinaryNode rightChild = (BinaryNode)rootNode.getRightChild();			rootNode.setRightChild(addNode(rightChild, newEntry, oldEntry)); 			rootNode = rebalance(rootNode);			}		else // newEntry matches entry in root		{			Comparable rootEntry = (Comparable)rootNode.getData(); // get current data			oldEntry.set(rootEntry);			rootNode.setData(newEntry);                            // replace current data		} // end if		return rootNode;	}  // end addNode