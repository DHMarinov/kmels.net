import java.io.*;import java.util.*;public class Driver {	public static void main(String[] args) 	{		SearchTreeInterface aTree = createTree();		testTreeOperations(aTree);		testSearchTreeOperations(aTree);		testSaveRestore(aTree);		testRemove(aTree);		System.out.println("Done.");			}  // end main	public static SearchTreeInterface createTree()	{		System.out.println("\n\nCreating an AVL tree:");		SearchTreeInterface aTree = new AVLTree();		System.out.println("Initial tree should be empty; isEmpty() returns " + aTree.isEmpty());// test add				System.out.println("\n\nTesting add():\n");		System.out.println("Adding 60: return " + aTree.add("60") + " (should be null)");		System.out.println("Adding 50: return " + aTree.add("50") + " (should be null)");		System.out.println("Adding 20: return " + aTree.add("20") + " (should be null)");		displayLevels(aTree);				System.out.println("Adding 80: return " + aTree.add("80") + " (should be null)");		displayLevels(aTree);		System.out.println("Adding 90: return " + aTree.add("90") + " (should be null)");		displayLevels(aTree);		System.out.println("Adding 70: return " + aTree.add("70") + " (should be null)");		displayLevels(aTree);		System.out.println("Adding 55: return " + aTree.add("55") + " (should be null)");		System.out.println("Adding 10: return " + aTree.add("10") + " (should be null)");		System.out.println("Adding 40: return " + aTree.add("40") + " (should be null)");		displayLevels(aTree);		System.out.println("Adding 35: return " + aTree.add("35") + " (should be null)");		displayLevels(aTree);		System.out.println("Adding duplicate 90: return " + aTree.add("90") + " (should be 90)");		System.out.println("\n\nThe tree contains " + aTree.getNumberOfNodes() + " (should be 10) items, as follows:\n");		traverse(aTree);				return aTree;	} // end createTree	public static void traverse(SearchTreeInterface aTree)	{		Iterator traverser = aTree.getInorderIterator();				while (traverser.hasNext())			System.out.println(traverser.next());		System.out.println();	} // end traverse	/** Displays nodes level by level */	public static void displayLevels(SearchTreeInterface aTree)	{		System.out.println("The tree in level order is ");		AVLTree avl = (AVLTree)aTree;		avl.display();		System.out.println();	} // end traverse	public static void testTreeOperations(SearchTreeInterface aTree)	{		if (aTree.isEmpty())			System.out.println("Tree is empty, but should not be.");		else			System.out.println("Tree is not empty.");				// display root, height, number of nodes		System.out.println("Root of tree is " + aTree.getRootData() + " (should be 60)");		System.out.println("Height of tree is " + aTree.getHeight() + " (should be 4)");		System.out.println("Tree has " + aTree.getNumberOfNodes() + " nodes (should be 10)");		} // end testTreeOperations		public static void testSearchTreeOperations(SearchTreeInterface aTree)	{	// test getEntry			System.out.println("\n\nTesting getEntry():\n");		System.out.println("\nGetting 55: return " + aTree.getEntry("55") + " (should be 55)");		System.out.println("\nGetting 70: return " + aTree.getEntry("70") + " (should be 70)");		System.out.println("\nGetting 60: return " + aTree.getEntry("60") + " (should be 60)");		System.out.println("\nGetting 10: return " + aTree.getEntry("10") + " (should be 10)");		System.out.println("\nGetting 35: return " + aTree.getEntry("35") + " (should be 35)");		System.out.println("\nGetting 00: return " + aTree.getEntry("00") + " (should be null)");		// test contains		System.out.println("\n\n\nTesting contains():\n");		if ( aTree.contains("60") )			System.out.println("\n60 is in tree - OK");		else 			System.out.println("Error in contains()");				if ( aTree.contains("20") )			System.out.println("\n20 is in tree - OK");		else 			System.out.println("Error in contains()");				if ( aTree.contains("90") )			System.out.println("\n90 is in tree - OK");		else 			System.out.println("Error in contains()");				if ( aTree.contains("70") )			System.out.println("\n70 is in tree - OK");		else 			System.out.println("Error in contains()");		if (!aTree.contains("00"))			System.out.println("\n00 is not in tree - OK");		else 			System.out.println("Error in contains()");	} // end testSearchTreeOperations	public static void testRemove(SearchTreeInterface aTree)	{		System.out.print("\n\n\nRemoving 60:   "); // root; no rebalance necessary		System.out.println("return " + aTree.remove("60") + " (should be 60)"); 		displayLevels(aTree);				System.out.print("\n\n\nRemoving 50:   "); // leaf; rebalance		System.out.println("return " + aTree.remove("50") + " (should be 50)");       		displayLevels(aTree);				System.out.print("\n\n\nRemoving 40:   "); // leaf; rebalance		System.out.println("return " + aTree.remove("40") + " (should be 40)");		displayLevels(aTree);		System.out.println("\n\nThe tree contains " + aTree.getNumberOfNodes() + " (should be 7) items, as follows:\n");		traverse(aTree);	} // end testRemove	public static void testSaveRestore(SearchTreeInterface aTree)	{		System.out.println("\n\nSaving tree to file and reading it back:\n");	// write tree to file		String fileName = "Data.txt"; // file name could be read				try		{			FileOutputStream out = new FileOutputStream(fileName);			ObjectOutputStream writer = new ObjectOutputStream(out);			writer.writeObject(aTree);		} 		catch (Exception e)		{			System.out.println("I/O error " + e);		}			// read tree from file		SearchTreeInterface treeRead = null; 		try		{			FileInputStream in = new FileInputStream(fileName);			ObjectInputStream reader = new ObjectInputStream(in);			treeRead = (BinarySearchTree) reader.readObject();		} 		catch (Exception e)		{			System.out.println("error " + e);		}				testTreeOperations(treeRead);		traverse(treeRead);	}  // end testSaveRestore}  // end Driver