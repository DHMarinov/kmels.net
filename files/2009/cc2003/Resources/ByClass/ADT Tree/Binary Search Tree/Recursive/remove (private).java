/** Task: Removes an entry from the tree rooted at a given node. *  @param rootNode a reference to the root of a tree *  @param entry the object to be removed *  @param oldEntry an object whose data field is null *  @return the root node of the resulting tree; if entry matches *  an entry in the tree, oldEntry's data field is the *  entry that was removed from the tree; otherwise it is *  null */private BinaryNode remove(BinaryNode rootNode, Comparable entry, ReturnObject oldEntry){	boolean found = false;	if (rootNode != null)	{		Comparable rootData = (Comparable)rootNode.getData();		int comparison = entry.compareTo(rootData);		if (comparison == 0) // entry == root entry		{			oldEntry.set(rootData);			rootNode = (BinaryNode)removeEntry(rootNode);		}		else if (comparison < 0) // entry < root entry		{			BinaryNode leftChild = (BinaryNode)rootNode.getLeftChild();			BinaryNode subtreeRoot = remove(leftChild, entry, oldEntry);			rootNode.setLeftChild(subtreeRoot);		}		else // entry > root entry		{			BinaryNode rightChild = (BinaryNode)rootNode.getRightChild();			rootNode.setRightChild(remove(rightChild, entry, oldEntry));		} // end if	} // end if		return rootNode;} // end remove