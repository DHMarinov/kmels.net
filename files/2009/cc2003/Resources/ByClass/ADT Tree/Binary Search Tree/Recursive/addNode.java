/** Task: Adds a new entry to the subtree rooted at a given node. *  @param rootNode a reference to the root of a subtree *  @param newEntry an object that is the new entry *  @param oldEntry an object whose data field is null *  @return the root node of the resulting tree; if newEntry *  matched an entry that was already in the tree, *  oldEntry's data field is that current entry; *  otherwise it is null */private BinaryNode addNode(BinaryNode rootNode, Comparable newEntry, ReturnObject oldEntry){	if (rootNode == null)		rootNode = new BinaryNode(newEntry);	else if (newEntry.compareTo(rootNode.getData()) < 0)	{		BinaryNode leftChild = (BinaryNode)rootNode.getLeftChild();		BinaryNode subtreeRoot = addNode(leftChild, newEntry, oldEntry);		rootNode.setLeftChild(subtreeRoot);	}	else if (newEntry.compareTo(rootNode.getData()) > 0)	{		BinaryNode rightChild = (BinaryNode)rootNode.getRightChild();		rootNode.setRightChild(addNode(rightChild, newEntry, oldEntry));	}	else // newEntry matches entry in root	{		Comparable rootEntry = (Comparable)rootNode.getData();		oldEntry.set(rootEntry);		rootNode.setData(newEntry);	} // end if		return rootNode;} // end addNode