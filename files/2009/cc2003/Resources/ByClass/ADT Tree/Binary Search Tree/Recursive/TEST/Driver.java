import java.io.*;import java.util.*;public class Driver {	private static final Name dirk = new Name("Dirk");	private static final Name abel = new Name("Abel");    private static final Name miguel = new Name("Miguel");	private static final Name tabatha = new Name("Tabatha");	private static final Name tom = new Name("Tom");	private static final Name sam = new Name("Sam");	private static final Name reiss = new Name("Reiss");	private static final Name bette = new Name("Bette");	private static final Name carole = new Name("Carole");	private static final Name derek = new Name("Derek");	private static final Name nancy = new Name("Nancy");	public static void main(String[] args) 	{		SearchTreeInterface aTree = createTree();		testTreeOperations(aTree);		testSearchTreeOperations(aTree);		testSaveRestore(aTree);		testRemove(aTree);		System.out.println("Done.");	}  // end main	public static SearchTreeInterface createTree()	{		System.out.println("\n\nCreating a binary search tree:");		SearchTreeInterface aTree = new BinarySearchTree();		System.out.println("Initial tree should be empty; isEmpty() returns " + aTree.isEmpty());// test add				System.out.println("\n\nTesting add():\n");		System.out.println("Adding Dirk:           return " + aTree.add(dirk) + " (should be null)");		System.out.println("Adding Abel:           return " + aTree.add(abel) + " (should be null)");		System.out.println("Adding Miguel:         return " + aTree.add(miguel) + " (should be null)");		System.out.println("Adding Tabatha:        return " + aTree.add(tabatha) + " (should be null)");		System.out.println("Adding Tom:            return " + aTree.add(tom) + " (should be null)");		System.out.println("Adding Sam:            return " + aTree.add(sam) + " (should be null)");		System.out.println("Adding Reiss:          return " + aTree.add(reiss) + " (should be null)");		System.out.println("Adding Bette:          return " + aTree.add(bette) + " (should be null)");		System.out.println("Adding Carole:         return " + aTree.add(carole) + " (should be null)");		System.out.println("Adding Derek:          return " + aTree.add(derek) + " (should be null)");		System.out.println("Adding Nancy:          return " + aTree.add(nancy) + " (should be null)");		System.out.println("Adding duplicate Dirk: return " + aTree.add(new Name("Dirk")) + "(should be Dirk)");		System.out.println("\n\nThe tree contains " + aTree.getNumberOfNodes() + " (should be 11) items, as follows:\n");		traverse(aTree);		return aTree;	} // end createTree	public static void traverse(SearchTreeInterface bst)	{		Iterator traverser = bst.getInorderIterator();				while (traverser.hasNext())			System.out.println(traverser.next());		System.out.println();	} // end traverse	public static void testTreeOperations(SearchTreeInterface aTree)	{		if (aTree.isEmpty())			System.out.println("Tree is empty, but should not be.");		else			System.out.println("Tree is not empty.");				// display root, height, number of nodes		System.out.println("Root of tree is " + aTree.getRootData() + " (should be Dirk)");		System.out.println("Height of tree is " + aTree.getHeight() + " (should be 6)");		System.out.println("Tree has " + aTree.getNumberOfNodes() + " nodes (should be 11)");		} // end testTreeOperations		public static void testSearchTreeOperations(SearchTreeInterface aTree)	{	// test getEntry				System.out.println("\n\nTesting getEntry():\n");		System.out.println("\nGetting Abel:    return " + aTree.getEntry(new Name("Abel")) + "(should be Abel)");		System.out.println("\nGetting Sam:     return " + aTree.getEntry(sam) + "(should be Sam)");		System.out.println("\nGetting Tom:     return " + aTree.getEntry(tom) + "(should be Tom)");		System.out.println("\nGetting Reiss:   return " + aTree.getEntry(reiss) + "(should be Reiss)");		System.out.println("\nGetting Miguel:  return " + aTree.getEntry(miguel) + "(should be Miguel)");		System.out.println("\nGetting Phantom: return " + aTree.getEntry(new Name("Phantom")) + " (should be null)");		// test contains		System.out.println("\n\n\nTesting contains():\n");		if ( aTree.contains(new Name("Sam")) )			System.out.println("\nSam is in tree - OK");		else 			System.out.println("Error in contains()");				if ( aTree.contains(abel) )			System.out.println("\nAbel is in tree - OK");		else 			System.out.println("Error in contains()");				if ( aTree.contains(miguel) )			System.out.println("\nMiguel is in tree - OK");		else 			System.out.println("Error in contains()");				if ( aTree.contains(tom) )			System.out.println("\nTom is in tree - OK");		else 			System.out.println("Error in contains()");		if (!aTree.contains(new Name("Dave")))			System.out.println("\nDave is not in tree - OK");		else 			System.out.println("Error in contains()");	} // end testSearchTreeOperations	public static void testRemove(SearchTreeInterface aTree)	{			// test remove		System.out.println("\n\n\nRemoving Nancy:   return " + aTree.remove(new Name("Nancy")) + "(should be Nancy)"); // leaf		System.out.println("Removing Derek:   return " + aTree.remove(derek) + "(should be Derek)");                   // leaf		System.out.println("Removing Abel:    return " + aTree.remove(abel) + "(should be Abel)");                     // one child		System.out.println("Removing Dirk:    return " + aTree.remove(dirk) + "(should be Dirk)");                     // two children		System.out.println("Removing Sam:     return " + aTree.remove(sam) + "(should be Sam)");                       // one child		System.out.println("Removing Tabatha: return " + aTree.remove(tabatha) + "(should be Tabatha)");               // two children		System.out.println("Removing Dave:    return " + aTree.remove(new Name("Dave")) + " (should be null)");        // missing		System.out.println("\n\nThe tree contains " + aTree.getNumberOfNodes() + " (should be 5) items, as follows:\n");		traverse(aTree);	} // end testRemove	public static void testSaveRestore(SearchTreeInterface aTree)	{		System.out.println("\n\nSaving tree to file and reading it back:\n");// write tree to file		String fileName = "Data.txt"; // file name could be read				try		{			FileOutputStream out = new FileOutputStream(fileName);			ObjectOutputStream writer = new ObjectOutputStream(out);			writer.writeObject(aTree);		} 		catch (Exception e)		{			System.out.println("I/O error " + e);		}		// read tree from file		SearchTreeInterface treeRead = null; 		try		{			FileInputStream in = new FileInputStream(fileName);			ObjectInputStream reader = new ObjectInputStream(in);			treeRead = (BinarySearchTree) reader.readObject();		} 		catch (Exception e)		{			System.out.println("error " + e);		}				testTreeOperations(treeRead);		traverse(treeRead);	}  // end testSaveRestore}  // end Driver