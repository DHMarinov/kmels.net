/** Task: Removes the entry in a given root node of a subtree. *  @param rootNode the root node of the subtree *  @return the root node of the revised subtree */private BinaryNode removeEntry(BinaryNode rootNode){	// Case 1: rootNode has two children	if (rootNode.hasLeftChild() && rootNode.hasRightChild())	{		// find node with largest entry in left subtree		BinaryNode leftSubtreeRoot = (BinaryNode)rootNode.getLeftChild();		BinaryNode largestNode = findLargest(leftSubtreeRoot);				// replace entry in root		rootNode.setData(largestNode.getData());				// remove node with largest entry in left subtree		rootNode.setLeftChild(removeLargest(leftSubtreeRoot));	} // end if		// Case 2: rootNode has at most one child	else if (rootNode.getLeftChild() == null)			rootNode = (BinaryNode)rootNode.getRightChild();	else			rootNode = (BinaryNode)rootNode.getLeftChild();	// Assertion: if rootNode was a leaf, it is now null	return rootNode;} // end removeEntry