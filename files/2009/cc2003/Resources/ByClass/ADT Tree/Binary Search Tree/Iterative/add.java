public Comparable add(Comparable newEntry){	Comparable result = null;		if (isEmpty())		setRootNode(new BinaryNode(newEntry)); // method is protected	                                           // in BinaryTree	else // look for newEntry in tree	{		BinaryNode currentNode = getRootNode(); // currentNode != null		BinaryNode parentNode = null;		boolean found = false;		char direction = ' ';				while (!found && (currentNode != null) )		{			Object currentEntry = currentNode.getData();			int comparison = newEntry.compareTo(currentEntry);			if (comparison < 0)			{ // search left				direction = 'L';				parentNode = currentNode;				currentNode = (BinaryNode)currentNode.getLeftChild();			}			else if (comparison > 0)			{ // search right				direction = 'R';				parentNode = currentNode;				currentNode = (BinaryNode)currentNode.getRightChild();			}			else			{ // newEntry matches currentEntry: return and replace			  // currentEntry				result = (Comparable) currentEntry;				currentNode.setData(newEntry);				found = true;			} // end if		} // end while				if (!found)		{ // add new entry as a leaf child of parentNode			if (direction == 'L')				parentNode.setLeftChild(new BinaryNode(newEntry));			else				parentNode.setRightChild(new BinaryNode(newEntry));		} // end if	} // end if		return result;} // end add