import java.util.Iterator;public interface SearchTreeInterface extends TreeInterface{	/** Task: Searches for a specific entry in the tree.	 *  @param entry an object to be found	 *  @return true if the object was found in the tree */	public boolean contains(Comparable entry);		/** Task: Retrieves a specific entry in the tree.	 *  @param entry an object to be found	 *  @return either the object that was found in the tree or	 *  null if no such object exists */	public Comparable getEntry(Comparable entry);		/** Task: Adds a new entry to the tree. If the entry matches	 *  an object that exists in the tree already, replaces	 *  the object with the new entry.	 *  @param newEntry an object to add to the tree	 *  @return either null if newEntry was not in the tree already,	 *  or an existing entry that matched the parameter	 *  newEntry and has been replaced in the tree */	public Comparable add(Comparable newEntry);		/** Task: Removes a specific entry from the tree.	 *  @param entry an object to be removed	 *  @return either the object that was removed from the tree or	 *  null if no such object exists */	public Comparable remove(Comparable entry);		/** Task: Creates an iterator that traverses all entries in the	 *  tree.	 *  @return an iterator that provides sequential access to the	 *  entries in the tree */	public Iterator getInorderIterator();} // end SearchTreeInterface