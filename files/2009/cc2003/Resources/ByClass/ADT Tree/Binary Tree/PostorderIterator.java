private class PostorderIterator implements Iterator{	private StackInterface nodeStack;	private BinaryNode currentNode;		public PostorderIterator()	{		nodeStack = new LinkedStack();		currentNode = root;	} // end default constructor		public boolean hasNext() 	{		return !nodeStack.isEmpty() || (currentNode != null);	} // end hasNext		public Object next()	{		boolean foundNext = false;		BinaryNode leftChild, rightChild, nextNode = null;				// find leftmost leaf		while (currentNode != null)		{			nodeStack.push(currentNode);			leftChild = (BinaryNode)currentNode.getLeftChild();			if (leftChild == null)					currentNode = (BinaryNode)currentNode.getRightChild();			else				currentNode = leftChild;		} // end while				// stack is not empty either because we just pushed a node, or		// it wasn't empty to begin with since hasNext() is true.		// But Iterator specifies an exception for next() in case		// hasNext() is false.				if (!nodeStack.isEmpty())		{			nextNode = (BinaryNode) nodeStack.pop();			// nextNode != null since stack was not empty before pop			BinaryNode parent = (BinaryNode) nodeStack.peek();						if (parent != null && nextNode == parent.getLeftChild())				currentNode = (BinaryNode)parent.getRightChild();				else				currentNode = null;		}		else		{			throw new NoSuchElementException();		} // end if				return nextNode.getData();	} // end next	public void remove()	{		throw new UnsupportedOperationException();	} // end remove} // end PostorderIterator