import java.io.*;public class DecisionTree extends BinaryTree implements DecisionTreeInterface{	private BinaryNode currentNode;  		public DecisionTree()	{		super();		currentNode = null;	} // end default constructor		public DecisionTree(Object rootData)	{		super(rootData);		currentNode = getRootNode();	} // end constructor		private DecisionTree(BinaryNode rootNode)	{		super(rootNode);		currentNode = getRootNode();	} // end constructor	public DecisionTree(Object rootData, DecisionTree leftTree, DecisionTree rightTree)	{		super(rootData, leftTree, rightTree);		currentNode = getRootNode();	} // end constructor	public void reset()	{		currentNode = getRootNode();	} // end reset		public Object getCurrentData()	{		if (currentNode != null)		 	return currentNode.getData();		else		 	return null;	} // end getCurrentData		public boolean isAnswer()	{		return currentNode.isLeaf();	} // end isAnswer	public void advanceToNo()	{		currentNode = (BinaryNode)currentNode.getLeftChild();	} // end advanceToNo		public void advanceToYes()	{		currentNode = (BinaryNode)currentNode.getRightChild();	} // end advanceToYes		protected BinaryNode getCurrentNode()	{		return currentNode;	} // end getCurrentNode} // end DecisionTree