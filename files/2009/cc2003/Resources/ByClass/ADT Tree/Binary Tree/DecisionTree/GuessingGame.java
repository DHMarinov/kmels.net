public class GuessingGame{	private DecisionTree tree;		public GuessingGame(String question, String noAnswer, String yesAnswer)	{		DecisionTree no = new DecisionTree(noAnswer);		DecisionTree yes = new DecisionTree(yesAnswer);		tree = new DecisionTree(question, no, yes);	} // end default constructor		public void play()	{		tree.reset();		while (!tree.isAnswer())		{			// ask current question			System.out.println(tree.getCurrentData());						if (Client.isUserResponseYes())				tree.advanceToYes();			else				tree.advanceToNo();		} // end while				// Assertion: leaf is reached; make guess		System.out.println("My guess is " + tree.getCurrentData() +		                   ". Am I right?");		                   		if (Client.isUserResponseYes())			System.out.println("I win.");		else			learn();	} // end play		private void learn()	{		System.out.println("I give up; what are you thinking of? ");		String correctAnswer = Client.getUserResponse();		String currentAnswer = (String) tree.getCurrentData();				System.out.println("Give me a question whose answer is yes for " +  correctAnswer		                   + " but no for " + currentAnswer);		String newQuestion = Client.getUserResponse();				extendTree(newQuestion, currentAnswer, correctAnswer);	} // end learn	/** Task: Replaces the current node, which must be a leaf,	 *        with a question and two answers.	 *  @parm question  a question ending in '?'	 *  @parm noAnswer  the response when the answer to the question is 'no'	 *  @parm yesAnswer the response when the answer to the question is 'yes' */	private void extendTree(String question, String noAnswer, String yesAnswer)	{		BinaryNode currentNode = tree.getCurrentNode();		currentNode.setData(question);		currentNode.setLeftChild(new BinaryNode(noAnswer));		currentNode.setRightChild(new BinaryNode(yesAnswer));	} // end extendTree} // end GuessingGame