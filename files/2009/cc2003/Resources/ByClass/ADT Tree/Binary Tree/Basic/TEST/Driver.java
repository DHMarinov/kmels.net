import java.io.*;import java.util.*;public class Driver {	public static void main(String[] args) 	{		testEmptyTree();		BinaryTreeInterface aTree = createTree();		testTreeOperations(aTree);		testTraversals(aTree);		testSaveRestore(aTree);		System.out.println("Done.");	}  // end main	public static BinaryTreeInterface createTree()	{		System.out.println("\n\nCreating a binary tree (Figure 24.13):");	// this tree is from Segment 24.19 (Figure 24.13)		// represent each leaf as a one-node tree		BinaryTreeInterface dTree = new BinaryTree();		dTree.setTree("D");		BinaryTreeInterface fTree = new BinaryTree();		fTree.setTree("F");		BinaryTreeInterface gTree = new BinaryTree();		gTree.setTree("G");		BinaryTreeInterface hTree = new BinaryTree();		hTree.setTree("H");		BinaryTreeInterface emptyTree = new BinaryTree();		// form larger subtrees		BinaryTreeInterface eTree = new BinaryTree();		eTree.setTree("E", fTree, gTree); // subtree rooted at E		BinaryTreeInterface bTree = new BinaryTree();		bTree.setTree("B", dTree, eTree); // subtree rooted at B		BinaryTreeInterface cTree = new BinaryTree();		cTree.setTree("C", emptyTree, hTree); // subtree rooted at C		BinaryTreeInterface aTree = new BinaryTree();		aTree.setTree("A", bTree, cTree); // desired tree rooted at A		return aTree;	} // end createTree	public static void testTreeOperations(BinaryTreeInterface aTree)	{		if (aTree.isEmpty())			System.out.println("Tree is empty, but should not be.");		else			System.out.println("Tree is not empty.");				// display root, height, number of nodes		System.out.println("Root of tree is " + aTree.getRootData() + " (should be A)");		System.out.println("Height of tree is " + aTree.getHeight() + " (should be 4)");		System.out.println("Tree has " + aTree.getNumberOfNodes() + " nodes (should be 8)");		} // end testTreeOperations		public static void testTraversals(BinaryTreeInterface aTree)	{		// display nodes in preorder		System.out.print("Preorder traversal is ");		Iterator preorder = aTree.getPreorderIterator();		while (preorder.hasNext())			System.out.print(preorder.next() + " ");		System.out.println();		System.out.println("           (should be A B D E F G C H)");		// display nodes in postorder		System.out.print("Postorder traversal is ");		Iterator postorder = aTree.getPostorderIterator();		while (postorder.hasNext())			System.out.print(postorder.next() + " ");		System.out.println();		System.out.println("            (should be D F G E B H C A)");		// display nodes in inorder		System.out.print("Inorder traversal is ");		Iterator inorder = aTree.getInorderIterator();		while (inorder.hasNext())			System.out.print(inorder.next() + " ");		System.out.println();		System.out.println("          (should be D B F E G A C H)");		// display nodes in level order		System.out.print("Level order traversal is ");		Iterator levelorder = aTree.getLevelOrderIterator();		while (levelorder.hasNext())			System.out.print(levelorder.next() + " ");		System.out.println();		System.out.println("              (should be A B C D E H F G)");	} // end testTraversals		public static void testSaveRestore(BinaryTreeInterface aTree)	{		System.out.println("\n\nSaving tree to file and reading it back:\n");// write tree to file		String fileName = "Data.txt"; // file name could be read				try		{			FileOutputStream out = new FileOutputStream(fileName);			ObjectOutputStream writer = new ObjectOutputStream(out);			writer.writeObject(aTree);		} 		catch (Exception e)		{			System.out.println("I/O error " + e);		}		// read tree from file		BinaryTree myTree = null; 		try		{			FileInputStream in = new FileInputStream(fileName);			ObjectInputStream reader = new ObjectInputStream(in);			myTree = (BinaryTree) reader.readObject();		} 		catch (Exception e)		{			System.out.println("error " + e);		}				testTreeOperations(myTree);		testTraversals(myTree);	}  // end testSaveRestore	public static void testEmptyTree() 	{		BinaryTree myTree = new BinaryTree();		// myTree.root is null		// myTree is empty but not null				if (myTree == null)			System.out.println("myTree is null");		else		{			System.out.println("myTree is not null");			if (myTree.isEmpty())			 	System.out.println("myTree is empty");			else			 	System.out.println("myTree.root is not empty");		} // end if	} // end testEmptyTree	}  // end Driver