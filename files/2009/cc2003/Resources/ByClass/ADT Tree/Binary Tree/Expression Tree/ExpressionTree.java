public class ExpressionTree extends BinaryTree{	public ExpressionTree()	{	} // end default constructor		public double evaluate()	{		return evaluate(getRootNode());	} // end evaluate		private double evaluate(BinaryNodeInterface rootNode)	{		double result;		if (rootNode == null)			result = 0;		else if (rootNode.isLeaf())		{			String variable = (String) rootNode.getData();			result = getValueOf(variable);		}		else		{			double firstOperand = evaluate(rootNode.getLeftChild());			double secondOperand = evaluate(rootNode.getRightChild());			String operator = (String) rootNode.getData();			result = compute(operator, firstOperand, secondOperand);		} // end if				return result;	} // end evaluate			private double compute(String operator, double firstOperand, double secondOperand)	{		double result = 0;				if (operator.equals("+"))			result = firstOperand + secondOperand;		else if (operator.equals("-"))			result = firstOperand - secondOperand;		else if (operator.equals("*"))			result = firstOperand * secondOperand;		else if (operator.equals("/"))			result = firstOperand / secondOperand;		return result;	} // end compute	private double getValueOf(String variable)	{ 			double result = 0;				if (variable.equals("a"))			result = 2;		else if (variable.equals("b"))			result = 3;		else if (variable.equals("c"))			result = 4;		else if (variable.equals("d"))			result = 5;		else if (variable.equals("e"))			result = 2;		return result;	} // end getValueOf} // end ExpressionTree	