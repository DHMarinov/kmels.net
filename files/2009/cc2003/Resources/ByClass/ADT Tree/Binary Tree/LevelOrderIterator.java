private class LevelOrderIterator implements Iterator{	private QueueInterface nodeQueue;		public LevelOrderIterator()	{		nodeQueue = new LinkedQueue();		if (root != null)			nodeQueue.enqueue(root);	} // end default constructor		public boolean hasNext() 	{		return !nodeQueue.isEmpty();	} // end hasNext		public Object next()	{		BinaryNode nextNode;				if (hasNext())		{			nextNode = (BinaryNode) nodeQueue.dequeue();			BinaryNode leftChild = (BinaryNode)nextNode.getLeftChild();			BinaryNode rightChild = (BinaryNode)nextNode.getRightChild();						// add to queue in order of recursive calls			if (leftChild != null)				nodeQueue.enqueue(leftChild);			if (rightChild != null)				nodeQueue.enqueue(rightChild);		}		else		{			throw new NoSuchElementException();		}			return nextNode.getData();	} // end next	public void remove()	{		throw new UnsupportedOperationException();	} // end remove} // end LevelorderIterator