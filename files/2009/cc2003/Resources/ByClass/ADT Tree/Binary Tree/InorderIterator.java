private class InorderIterator implements Iterator{	private StackInterface nodeStack;	private BinaryNode     currentNode;	public InorderIterator()	{		nodeStack = new LinkedStack();		currentNode = root;	} // end default constructor	public boolean hasNext() 	{		return !nodeStack.isEmpty() || (currentNode != null);	} // end hasNext	public Object next()	{		BinaryNode nextNode = null;		while (currentNode != null)		{			nodeStack.push(currentNode);			currentNode = (BinaryNode)currentNode.getLeftChild();		} // end while		if (!nodeStack.isEmpty())		{			nextNode = (BinaryNode) nodeStack.pop();			currentNode = (BinaryNode)nextNode.getRightChild();		}		else			throw new NoSuchElementException();		return nextNode.getData(); 	} // end next	public void remove()	{		throw new UnsupportedOperationException();	} // end remove} // end InorderIterator