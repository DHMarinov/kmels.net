private class PreorderIterator implements Iterator{	private StackInterface nodeStack;		public PreorderIterator()	{		nodeStack = new LinkedStack();		if (root != null)			nodeStack.push(root);	} // end default constructor		public boolean hasNext() 	{		return !nodeStack.isEmpty();	} // end hasNext		public Object next()	{		BinaryNode nextNode;				if (hasNext())		{			nextNode = (BinaryNode) nodeStack.pop();			BinaryNode leftChild = (BinaryNode)nextNode.getLeftChild();			BinaryNode rightChild = (BinaryNode)nextNode.getRightChild();						// push into stack in reverse order of recursive calls			if (rightChild != null)				nodeStack.push(rightChild);							if (leftChild != null)				nodeStack.push(leftChild);		}		else		{			throw new NoSuchElementException();		}			return nextNode.getData();	} // end next	public void remove()	{		//throw new UnsupportedOperationException();	} // end remove} // end PreorderIterator