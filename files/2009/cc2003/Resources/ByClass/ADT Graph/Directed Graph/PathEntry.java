package GraphPackage;class PathEntry implements Comparable{	private Vertex vertex; 		private Vertex previousVertex; 	private double cost; // cost to nextVertex		public PathEntry(Vertex vertex, double cost, Vertex previousVertex)	{		this.vertex = vertex;		this.previousVertex = previousVertex;		this.cost = cost;	} // end constructor		public Vertex getVertex()	{		return vertex;	} // end getVertex		public Vertex getPredecessor()	{		return previousVertex;	} // end getPredecessor	public double getCost()	{		return cost;	} // end getCost		public int compareTo(Object other)	{		PathEntry otherEntry = (PathEntry)other;		int result = 0;		// using opp of reality since I'm using a maxHeap for test		if (cost > otherEntry.cost)			result = -1;		else if (cost < otherEntry.cost)			result = 1;					return result;	} // end compareTo		public String toString()	{		return vertex.toString() + " " + cost;	} // end toString } // end PathEntry