public interface BasicGraphInterface{	/** Task: Adds a given vertex to the graph.	 *  @param vertexLabel an object that labels the new vertex */	public void addVertex(Object vertexLabel);	/** Task: Adds an edge between two given vertices that are already	 *        in the graph. In a directed graph, the edge begins at the	 *        first vertex given.	 *  @param begin an object that labels the origin vertex of the edge	 *  @param end an object that labels the end vertex of the edge	 *  @param edgeWeight the real value of the edge's weight, if any */	public void addEdge(Object begin, Object end);	public void addEdge(Object begin, Object end, double edgeWeight);	/** Task: Determines whether an edge exists between two given	 *        vertices.	 *  @param begin an object that labels the origin vertex of the edge	 *  @param end an object that labels the end vertex of the edge	 *  @return true if an edge exists */	public boolean hasEdge(Object begin, Object end);	/** Task: Determines whether the graph is empty.	 *  @return true if the graph is empty */	public boolean isEmpty();	/** Task: Gets the number of vertices in the graph.	 *  @return the number of vertices in the graph */	public int getNumberOfVertices();	/** Task: Gets the number of edges in the graph.	 *  @return the number of edges in the graph */	public int getNumberOfEdges();	/** Task: Removes all vertices and edges from the graph. */	public void clear();} // end BasicGraphInterface