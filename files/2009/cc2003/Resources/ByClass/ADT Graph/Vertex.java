package GraphPackage;import java.util.Iterator;class Vertex implements VertexInterface, java.io.Serializable{	private Object label;	private ListWithIteratorInterface edgeList; // edges to adjacent vertices	private boolean visited; // true if visited	private Vertex previousVertex; // on path to this vertex	private double cost; // of path to this vertex	public Vertex(Object vertexLabel)	{		label = vertexLabel;		edgeList = new LinkedListWithIterator();		visited = false;		previousVertex = null;		cost = 0;	} // end constructor		public Object getLabel()	{		return label;	} // end getLabel	public void visit()	{		visited = true;	} // end visit	public void unVisit()	{		visited = false;	} // end unVisit	public boolean isVisited()	{		return visited;	} // end isVisited		public void addEdge(Vertex endVertex, double edgeWeight)	{		edgeList.add(new Edge(endVertex, edgeWeight));		endVertex.setPredecessor(this);	} // end addEdge	public void addEdge(Vertex endVertex)	{		addEdge(endVertex, 0);	} // end addEdge		public Iterator getNeighborIterator()	{		return edgeList.getListIterator();	} // end getNeighborIterator	public boolean hasUnvisitedNeighbor()	{		return !edgeList.isEmpty();	} // end hasUnvisitedNeighbor	public Vertex getUnvisitedNeighbor()	{		Vertex result = null;		Iterator edges = getNeighborIterator();		while (edges.hasNext() && (result == null) )		{			Edge edgeToNextNeighbor = (Edge)edges.next();			Vertex nextNeighbor = edgeToNextNeighbor.getEndVertex();			if (!nextNeighbor.isVisited())			result = nextNeighbor;		} // end while		return result;	} // end getUnvisitedNeighbor	public void setPredecessor(Vertex predecessor)	{		previousVertex = predecessor;	} // end setPredecessor		public Vertex getPredecessor()	{		return previousVertex;	} // end getPredecessor		public boolean hasPredecessor()	{		return previousVertex != null;	} // end hasPredecessor		public void setCost(double newCost)	{		cost = newCost;	} // end setCost	public double getCost()	{		return cost;	} // end getCost		public boolean equals(Object other)	{		return label.equals(((Vertex)other).label);	} // end equals	public String toString()	{		return label.toString();	} // end toString		// Used for testing	public void display() 	{		System.out.print(label + " " );		Iterator i = getNeighborIterator();				while (i.hasNext())		{			Edge e = (Edge)i.next();	//			System.out.print((e.getEndVertex()).toString() + " "); // for unweighted graphs			System.out.print((e.getEndVertex()).toString() + e.getWeight() + " "); // for weighted graphs		} // end while		System.out.println();	} // end display} // end Vertex