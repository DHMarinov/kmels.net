import java.util.Iterator;public interface VertexInterface{	/** Task: Gets the vertex’s label.	 *  @return the object that labels the vertex */	public Object getLabel();	/** Task: Marks the vertex as visited */	public void	visit();	/** Task: Marks the vertex as unvisited */	public void	unVisit();	/** Task: Determines whether the vertex is marked as visited.	 *  @return true if the vertex is visited */	public boolean isVisited();	/** Task: Connects this vertex and the given vertex with an edge.	 *  @param endVertex a vertex in the graph that ends the edge	 *  @param edgeWeight a real-valued edge weight, if any */	public void addEdge(Vertex endVertex); // for unweighted graph	public void addEdge(Vertex endVertex, double edgeWeight);	/** Task: Creates an iterator that traverses all edges that begin at	 *        the vertex.	 *  @return an iterator of the edge objects that begin at this	 *  vertex */	public Iterator getNeighborIterator();	/** Task: Determines whether the vertex has an unvisited neighbor.	 *  @return true if the vertex has an unvisited neighbor */	public boolean hasUnvisitedNeighbor();	/** Task: Gets an unvisited neighbor, if any, of the vertex.	 *  @return either a vertex that is an unvisited neighbor or null	 *  if no such neighbor exists */	public Vertex getUnvisitedNeighbor();	/** Task: Records the previous vertex on a path to this vertex.  	 *  @param predecessor the vertex previous to this one */	public void setPredecessor(Vertex predecessor);	/** Task: Gets the vertex recorded as the previous vertex.	 *  @return either the previous vertex or null if no vertex was recorded */	public Vertex getPredecessor();	/** Task: Determines whether a previous vertex was recorded.	 *  @return true if a previous vertex was recorded for this vertex */	public boolean hasPredecessor();	/** Task: Records the cost of a path to this vertex.	 *  @param newCost the cost of the path */	public void setCost(double newCost);	/** Task: Gets the recorded cost of the path to this vertex.	 *  @return the cost of the path */	public double getCost();} // end VertexInterface