public class SortedList implements SortedListInterface{	private ListInterface list;	public SortedList()	{		list = new LList();	} // end default constructor		public boolean add(Comparable newEntry)	{		int newPosition = Math.abs(getPosition(newEntry));		return list.add(newPosition, newEntry);	} // end add		public boolean remove(Comparable anEntry)	{		boolean result = false;		int position = getPosition(anEntry);		if (position > 0)		{			list.remove(position);			result = true;		} // end if		return result;	} // end remove	public int getPosition(Comparable anEntry)	{		int position = 1;		int length = list.getLength();		// determine position of anEntry		while ( (position <= length) && 		        (anEntry.compareTo(list.getEntry(position)) > 0) )		{			position++;		} // end while		// determine whether anEntry is in list		if ( (position > length) || 		     (anEntry.compareTo(list.getEntry(position)) != 0) )		{			position = -position; // anEntry is not in list		} // end if		return position;	} // end getPosition		/* Each of the remaining methods, contains, remove, getEntry, 		clear,	getLength, isEmpty, isFull, and display has the same 		specifications as in the ADT list. Each simply can invoke the 		corresponding list method. */	public boolean contains(Object anEntry)	{		return list.contains(anEntry);	} // end contains	public Object remove(int givenPosition)	{		return list.remove(givenPosition);	} // end remove	public Object getEntry(int givenPosition)	{		return list.getEntry(givenPosition);	} // end getEntry	public void clear()	 	{		list.clear();	} // end clear	public int getLength()	{		return list.getLength();	} // end getLength	public boolean isEmpty()	{		return list.isEmpty();	} // end isEmpty	public boolean isFull()	{		return list.isFull();	} // end isFull	 	public void display()	{		list.display();	} // end display} // end SortedList