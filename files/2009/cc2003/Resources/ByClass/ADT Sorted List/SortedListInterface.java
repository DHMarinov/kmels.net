public interface SortedListInterface {	/** Task: Adds a new entry to the sorted list in its proper 	 *        order.	 *  @param newEntry  the object to be added as a new entry 	 *  @return true if the addition is successful */	public boolean add(Comparable newEntry);	/** Task: Removes a specified entry from the sorted list.	 *  @param anEntry  the object to be removed	 *  @return true if anEntry was located and removed */	public boolean remove(Comparable anEntry);	/** Task: Gets the position of an entry in the sorted list.	 *  @param anEntry  the object to be found	 *  @return the position of the first or only occurrence of	 *          anEntry if it occurs in the list; otherwise returns 	 *          the position where anEntry would occur in the list, 	 *          but as a negative integer */	public int getPosition(Comparable anEntry);		/** Task: Retrieves the entry at a given position in the list.	 *  @param givenPosition  an integer that indicates the position of	 *                        the desired entry; givenPosition >= 1 	 *                        and givenPosition <= getLength()	 *  @return a reference to the indicated list entry, if found,	 *          otherwise returns null */	public Object getEntry(int givenPosition);		/** Task: Determines whether the list contains a given entry.	 *  @param anEntry  the object that is the desired entry 	 *  @return true if the list contains anEntry, or false if not RP*/	public boolean contains(Object anEntry);	/** Task: Removes the entry at a given position from the list.	 *        Entries originally at positions higher than the given 	 *        position are at the next lower position within the list, 	 *        and the listÍs size is decreased by 1. 	 *  @param givenPosition  an integer that indicates the position of	 *                        the entry to be removed; givenPosition >= 1 	 *                        and givenPosition <= getLength()	 * @return the entry at position givenPosition, if the list was	 *         not empty; otherwise, returns null */	public Object remove(int givenPosition);		/** Task: Removes all entries from the list. */	public void clear();	/** Task: Gets RP? the length of the list. detects	 *  @return the integer number of entries currently in the list */	public int getLength();	/** Task: Determines whether the list is empty.	 *  @return true if the list is empty */	public boolean isEmpty();	/** Task: Determines whether the list is full.	 *  @return true if the list is full, or false otherwise RP */	public boolean isFull();	/** Task: Displays all entries that are in the list, one per 	 *        line, in the order in which they occur in the list. */	public void display();} // end SortedListInterface