public class TwoPartCircularLinkedQueue implements QueueInterface,                                                    java.io.Serializable{	private Node queueNode; // references first node in queue	private Node freeNode;  // references node after back of queue	public TwoPartCircularLinkedQueue()	{		freeNode = new Node(null, null);		freeNode.setNextNode(freeNode);		queueNode = freeNode;	} // end default constructor		public void enqueue(Object newEntry)	{		if (isChainFull())		{ 			// allocate a new node and insert it after node that freeNode 			// references			Node newNode = new Node(null, freeNode.getNextNode());			freeNode.setNextNode(newNode);		} // end if		freeNode.setData(newEntry);		freeNode = freeNode.getNextNode();	} // end enqueue	public Object dequeue()	{		Object front = null;		if (!isEmpty())		{			front = queueNode.getData();			queueNode.setData(null);			queueNode = queueNode.getNextNode();		} // end if		return front;	} // end dequeue	public Object getFront()	{		Object front = null;		if (!isEmpty())			front = queueNode.getData();		return front;	} // end getFront	public boolean isEmpty()	{		return queueNode == freeNode;	} // end isEmpty	public void clear() // exercise	{		Node cur = queueNode; // cur != null		while (cur != freeNode)		{				cur.setData(null);			cur = cur.getNextNode();		}					queueNode = freeNode; // retain nodes	} // end clear	private boolean isChainFull()	{		return queueNode == freeNode.getNextNode();	} // end isChainFull		private class Node	{		private Object data;  // data portion		private Node	next;  // next to next node		private Node(Object dataPortion)// PRIVATE or PUBLIC is OK		{			data = dataPortion;			next = null;			} // end constructor				private Node(Object dataPortion, Node nextNode)// PRIVATE or PUBLIC is OK		{			data = dataPortion;			next = nextNode;			} // end constructor				private Object getData()		{			return data;		} // end getData				private void setData(Object newData)		{			data = newData;		} // end setData				private Node getNextNode()		{			return next;		} // end getNextNode				private void setNextNode(Node nextNode)		{			next = nextNode;		} // end setNextNode	} // end Node} // end TwoPartCircularLinkedQueue