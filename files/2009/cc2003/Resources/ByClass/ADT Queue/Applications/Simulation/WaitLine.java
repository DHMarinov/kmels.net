/** Simulates a waiting line. */public class WaitLine{	private QueueInterface line;	private int numberOfArrivals;	private int numberServed;	private int totalTimeWaited;	public WaitLine()	{		line = new LinkedQueue();		reset();	} // end default constructor	/** Task: Simulates a waiting line with one serving agent.	 *  @param duration  the number of simulated minutes 	 *  @param arrivalProbability  a real number between 0 and 1 that is 	 *         the probability of a customer arriving at a given time	 *  @param maxServiceTime  the longest service time for a customer */ 	public void simulate(int duration, double arrivalProbability, 	                     int maxServiceTime)	{		int serviceTimeLeft = 0;		for (int clock = 0; clock < duration; clock++)		{			if (Math.random() < arrivalProbability)			{				numberOfArrivals++;				int serviceTime = (int)(Math.random() * maxServiceTime + 1);				Customer nextArrival = new Customer(clock, serviceTime, 				                                    numberOfArrivals);				line.enqueue(nextArrival);				System.out.println("Customer " + numberOfArrivals 				                 + " enters line at time " + clock 				                 + ". Service time is " + serviceTime);			} // end if			if (serviceTimeLeft > 0)				serviceTimeLeft--;			else if (!line.isEmpty())			{				Customer nextCustomer = (Customer)line.dequeue();				serviceTimeLeft = nextCustomer.getServiceTime() - 1;				int timeWaited = clock - nextCustomer.getArrivalTime();				totalTimeWaited = totalTimeWaited + timeWaited;				numberServed++;				System.out.println("Customer " 				                 + nextCustomer.getCustomerNumber()				                 + " begins service at time " + clock 				                 + ". Time waited is " + timeWaited);			} // end if		} // end for	} // end simulate	/** Task: Displays summary results of the simulation. */ 	public void displayResults()	{		System.out.println();		System.out.println("Number served = " + numberServed);		System.out.println("Total time waited = " + totalTimeWaited);		double averageTimeWaited = ((double)totalTimeWaited)/numberServed;		System.out.println("Average time waited = " + averageTimeWaited);		int leftInLine = numberOfArrivals - numberServed;		System.out.println("Number left in line = " + leftInLine);	} // end displayResults	/** Task: Initializes the simulation. */ 	public final void reset()	{		line.clear();		numberOfArrivals = 0;		numberServed = 0;		totalTimeWaited = 0;	} // end reset} // end WaitLine