public Object add(Object key, Object value){	// assumes key and value are not null	Object oldValue = null; // value to return		if (isHashTableTooFull())	{		rehash();	} // end if	int index = getHashIndex(key);	// index always in range due to mod of hash fn	if (hashTable[index] == null)	{		// key not found, so insert new entry				hashTable[index] = new Node(key, value);		currentSize++;	}	else // search chain beginning at hashTable[index] for a node that contains key	{		Node currentNode = hashTable[index];		Node nodeBefore = null;				while ( (currentNode != null) && !key.equals(currentNode.getKey()) )		{			nodeBefore = currentNode;			currentNode = currentNode.getNextNode();		} // end while		if (currentNode == null)		{			// key not in chain; add new entry to end of chain			Node newNode = new Node(key, value);			nodeBefore.setNextNode(newNode);			currentSize++;		}		else		{			// key found; get old value for return and then replace it			oldValue = currentNode.getValue();			currentNode.setValue(value);		} // end if	} // end if	return oldValue;} // end add