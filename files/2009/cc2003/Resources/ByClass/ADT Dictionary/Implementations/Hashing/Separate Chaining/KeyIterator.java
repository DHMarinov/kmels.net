	private class KeyIterator implements Iterator	{		private Node currentNode;		private int currentIndex; // location in hash table				private KeyIterator()		{			currentIndex = -1;			currentNode = getNextChain(); // set to first non-empty chain		} // end default constructor				private Node getNextChain()		{			while ( (currentNode == null) && (currentIndex < hashTable.length - 1) ) // skip empty lists			{				currentIndex++;				currentNode = hashTable[currentIndex];			} // end while						return currentNode;		} // end getNextChain		// methods are public to match the interface Iterator 		public boolean hasNext() 		{			return currentNode != null;		} // end hasNext				public Object next()		{			Object result = null;						if (hasNext())			{				result = currentNode.getKey();				currentNode = currentNode.getNextNode(); // follow chain								if (currentNode == null) // if at end of chain				{					currentNode = getNextChain();				} // end if 			}			else			{				throw new NoSuchElementException(); // in java.util			}					return result;		} // end next				public void remove()		{			throw new UnsupportedOperationException(); // in java.lang		} // end remove	} // end KeyIterator