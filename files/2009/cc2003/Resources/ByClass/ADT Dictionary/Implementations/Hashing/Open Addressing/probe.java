private int probe(int index, Object key){	boolean found = false;	boolean repeatedIndex = false;	int firstIndex = index;     // first index in probe sequence	int removedStateIndex = -1; // index of first location in	                            // removed state	while ( !found && !repeatedIndex && (hashTable[index] != null) )	{		if (hashTable[index].isRemoved())		{			// save index of first not-in-use location found			if (removedStateIndex == -1)				removedStateIndex = index;			index = (index + 1) % hashTable.length; // linear probing		}		else if (key.equals(hashTable[index].getKey()))			found = true; // key found		else // follow probe sequence			index = (index + 1) % hashTable.length; // linear probing		if (index == firstIndex)			repeatedIndex = true; // probe sequence is repeating	} // end while	// Assertion: either key or null is found at hashTable[index]	if (found || (removedStateIndex == -1) )		return index; // index of either key or null	else		return removedStateIndex;} // end probe