import java.lang.*; // UnsupportedOperationExceptionimport java.util.*; // Iteratorpublic class SortedVectorDictionary implements DictionaryInterface,                                               java.io.Serializable{	private Vector entries; 	public SortedVectorDictionary()	{		entries = new Vector(); // as needed, vector doubles its size	} // end default constructor	public SortedVectorDictionary(int maxSize)	{		entries = new Vector(maxSize);	} // end constructor	public Object add(Object key, Object value)	{		Object result = null;		int keyIndex = locateIndex(key);		if ( (keyIndex < entries.size()) &&		    key.equals(((Entry)entries.elementAt(keyIndex)).getKey()))		{			// key found; return and replace old value 			Entry currentEntry = (Entry) entries.elementAt(keyIndex);			result = currentEntry.getValue();			currentEntry.setValue(value);		}		else // add new entry		{			Entry newEntry = new Entry(key, value);			entries.insertElementAt(newEntry, keyIndex);		} // end if		return result;	} // end add	public Object remove(Object key)	{		Object result = null;  // return value		// search until either you find an entry containing key or		// you pass the point where it should be		int keyIndex = locateIndex(key);		if ( (keyIndex < entries.size()) 		     && key.equals( ((Entry)entries.elementAt(keyIndex)).getKey() ) )		{			Entry currentEntry = (Entry) entries.elementAt(keyIndex);			result = currentEntry.getValue();  // get current value for return			entries.removeElementAt(keyIndex);  // remove entry		} // end if		return result;  	} // end remove	public Object getValue(Object key)	{		Object result = null;  // result to return		// search until either you find an entry containing key or		// you pass the point where it should be		int keyIndex = locateIndex(key);		if ( (keyIndex < entries.size()) 		     && key.equals( ((Entry)entries.elementAt(keyIndex)).getKey() ) )		{		 result = ((Entry)entries.elementAt(keyIndex)).getValue();		}		return result;	} // end getValue	public boolean contains(Object key)	{		return getValue(key) != null; 	} // end contains	public boolean isEmpty()	{		return entries.isEmpty();	} // end isEmpty	public boolean isFull()	{		return false;	} // end isFull	public int getSize()	{		return entries.size();	} // end getSize	public final void clear()	{ 		entries.removeAllElements();			} // end clear	public Iterator getKeyIterator()	{		return new KeyIterator();	} // end getKeyIterator	public Iterator getValueIterator()	{		return new ValueIterator();	} // end getValueIterator	private int locateIndex(Object key)	{		Comparable cKey = (Comparable)key;		int currentSize = entries.size();		int index = 0;		while ( (index < currentSize) && 		        cKey.compareTo(((Entry)(entries.elementAt(index))).getKey())>0)			index++;		return index;	} // end locateIndex	public void display()	{		int currentSize = entries.size();		int index = 0;				while (index < currentSize)		{			Entry currentEntry = (Entry) entries.elementAt(index);				  		System.out.println(currentEntry.getKey() + " " + currentEntry.getValue());				index++;		} // end while		System.out.println();	} // end display	private class KeyIterator implements Iterator	{		private int currentIndex;				private KeyIterator()		{			currentIndex = 0;		} // end default constructor		// methods are public to match the interface Iterator 		public boolean hasNext() 		{			return currentIndex < entries.size();		} // end hasNext				public Object next()		{			Object result = null;						if (hasNext())			{				Entry currentEntry = (Entry) entries.elementAt(currentIndex);				result = currentEntry.getKey();				currentIndex++;			}			else			{				throw new NoSuchElementException(); // in java.util			}					return result;		} // end next		public void remove()		{			throw new UnsupportedOperationException(); // in java.lang		} // end remove	} // end KeyIterator	private class ValueIterator implements Iterator	{		private int currentIndex;				private ValueIterator()		{			currentIndex = 0;		} // end default constructor		// methods are public to match the interface Iterator 		public boolean hasNext() 		{			return currentIndex < entries.size();		} // end hasNext				public Object next()		{			Object result = null;						if (hasNext())			{				Entry currentEntry = (Entry) entries.elementAt(currentIndex);				result = currentEntry.getValue();				currentIndex++;			}			else			{				throw new NoSuchElementException(); // in java.util			}					return result;		} // end next				public void remove()		{			throw new java.lang.UnsupportedOperationException(); // in java.lang		} // end remove	} // end ValueIterator	private class Entry implements java.io.Serializable 	{		private Object key;		private Object value;		private Entry(Object searchKey, Object dataValue)		{			key = searchKey;			value = dataValue;		} // end constructor		private Object getKey()		{			return key;		} // end getKey		private Object getValue()		{			return value;		} // end getValue		private void setValue(Object dataValue)		{			value = dataValue;		} // end setValue	} // end Entry} // end SortedVectorDictionary