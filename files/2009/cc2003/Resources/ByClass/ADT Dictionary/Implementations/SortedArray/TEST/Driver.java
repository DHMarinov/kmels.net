import java.io.*;import java.util.*;public class Driver{	public static void main(String[] args) 	{		testDictionary();		System.out.println("\n\nDone.");	}  // end main		public static void testDictionary()	{// create a dictionary of initial size 11		DictionaryInterface nameList = new SortedArrayDictionary(11);		System.out.println("Create a dictionary:\n");		System.out.println("Initial dictionary should be empty; isEmpty() returns " + nameList.isEmpty());		// test add				System.out.println("\n\nTesting add():\n");		nameList.add(new Name("Dirk"), "555-1234");		nameList.add(new Name("Abel"), "555-5678");		nameList.add(new Name("Miguel"), "555-9012");		nameList.add(new Name("Tabatha"), "555-3456");		nameList.add(new Name("Tom"), "555-5555");		nameList.add(new Name("Sam"), "555-7890");		nameList.add(new Name("Reiss"), "555-2345");		nameList.add(new Name("Bette"), "555-7891");		nameList.add(new Name("Carole"), "555-7892");		nameList.add(new Name("Derek"), "555-7893");		nameList.add(new Name("Nancy"), "555-7894");		System.out.println("Dictionary should not be full; isFull() returns " + nameList.isFull());		System.out.println(nameList.getSize() + " (should be 11) items in dictionary, as follows:\n");		display(nameList);		// test getValue				System.out.println("\n\nTesting getValue():\n");		System.out.println("\nAbel:   " + nameList.getValue(new Name("Abel")));		System.out.println("\nSam:    " + nameList.getValue(new Name("Sam")));		System.out.println("\nTom:    " + nameList.getValue(new Name("Tom")));		System.out.println("\nReiss:  " + nameList.getValue(new Name("Reiss")));		System.out.println("\nMiguel: " + nameList.getValue(new Name("Miguel")));	// test contains		System.out.println("\n\n\nTesting contains():\n");		if ( nameList.contains(new Name("Sam")) )			System.out.println("\nSam is in dictionary - OK");		else 			System.out.println("Error in contains()");				if ( nameList.contains(new Name("Abel")) )			System.out.println("\nAbel is in dictionary - OK");		else 			System.out.println("Error in contains()");				if ( nameList.contains(new Name("Miguel")) )			System.out.println("\nMiguel is in dictionary - OK");		else 			System.out.println("Error in contains()");				if ( nameList.contains(new Name("Tom")) )			System.out.println("\nTom is in dictionary - OK");		else 			System.out.println("Error in contains()");		if (!nameList.contains(new Name("Dave")))			System.out.println("\nDave is not in dictionary - OK");		else 			System.out.println("Error in contains()");// remove first		System.out.println("\n\n\nRemoving first item Abel - Abel's number is " + nameList.remove(new Name("Abel")));// test replacing value		System.out.println("Replacing phone number of Reiss and Miguel:\n");		nameList.add(new Name("Reiss"), "555-5432");		nameList.add(new Name("Miguel"), "555-9120");     		System.out.println("\n" + nameList.getSize() + " (should be 10) items in dictionary, as follows:\n");		display(nameList);			// remove interior						System.out.println("\n\nRemoving interior item Reiss and last item Tom:\n");		nameList.remove(new Name("Reiss"));		nameList.remove(new Name("Tom"));// remove Sally (not in dictionary)						System.out.println("\nRemoving Sally (not in dictionary):\n");		Object result = nameList.remove(new Name("Sally"));		if (result == null)			System.out.println("Sally was not found in the dictionary.");		else			System.out.println("Error in remove().");		System.out.println("\n\n" + nameList.getSize() + " (should be 8) items in dictionary, as follows:\n");		display(nameList);// test clear		System.out.println("\n\nTesting clear():\n");		nameList.clear();				System.out.println("Dictionary should be empty; isEmpty() returns " + nameList.isEmpty());	} // testDictionary		public static void display(DictionaryInterface dictionary)	{		Iterator keyIterator = dictionary.getKeyIterator();		Iterator valueIterator = dictionary.getValueIterator();				while (keyIterator.hasNext() && valueIterator.hasNext())			System.out.println(keyIterator.next() + " : " + valueIterator.next());		System.out.println();	} // end display	}  // end Driver