import java.lang.*; // UnsupportedOperationExceptionimport java.util.*; // Iteratorimport java.io.Serializable;public class SortedArrayDictionary implements DictionaryInterface,                                               java.io.Serializable{	private Entry [] entries; // array of sorted entries	private int currentSize = 0; // number of entries	private final static int DEFAULT_MAX_SIZE = 25;	public SortedArrayDictionary()	{		entries = new Entry[DEFAULT_MAX_SIZE];		currentSize = 0;	} // end default constructor	public SortedArrayDictionary(int maxSize)	{		entries = new Entry[maxSize];		currentSize = 0;	} // end constructor		public Object add(Object key, Object value)	{		Object result = null;		int keyIndex = locateIndex(key);		if ( (keyIndex < currentSize) 				&& key.equals(entries[keyIndex].getKey()) )		{			// key found; return and replace old value 			result = entries[keyIndex].getValue(); 			entries[keyIndex].setValue(value); 		}		else 		{			if (isArrayFull())				doubleArray(); // expand array			makeRoom(keyIndex);			entries[keyIndex] = new Entry(key, value); 			currentSize++;		} // end if		return result;	} // end add	public Object remove(Object key)	{		Object result = null;		int keyIndex = locateIndex(key);			if ( (keyIndex < currentSize) && key.equals(entries[keyIndex].getKey()) )		{				// key found; remove entry and return its value 			result = entries[keyIndex].getValue();			removeArrayElement(keyIndex);			currentSize--;		} // end if		return result;	} // end remove	public Object getValue(Object key)	{		Object result = null;		int keyIndex = locateIndex(key);			if ( (keyIndex < currentSize) && key.equals(entries[keyIndex].getKey()) )		{		 		result = entries[keyIndex].getValue(); // key found; return value		} // end if			return result;	} // end getValue	public boolean contains(Object key)	{		return getValue(key) != null; 	} // end contains	public boolean isEmpty()	{		return getSize() == 0;	} // end isEmpty		public boolean isFull()	{		return false;	} // end isFull	public int getSize()	{		return currentSize;	} // end getSize	public final void clear()	{ // there was a reason I reallocated array; but a  reviewer didn't like it in earlier chapter.		currentSize = 0;	} // end clear	public Iterator getKeyIterator()	{		return new KeyIterator();	} // end getKeyIterator	public Iterator getValueIterator()	{		return new ValueIterator();	} // end getValueIterator	private boolean isArrayFull() 	{		return getSize() == entries.length;	} // end isArrayFull	private void doubleArray()	// Purpose: Doubles the size of the array of list entries.	{		Entry[] oldList = entries; // save reference to array of list entries		int oldSize = oldList.length;     // save old max size of array		entries = new Entry[2*oldSize];    // double size of array		// copy entries from old array to new, bigger array		for (int index = 0; index < oldSize; ++index)		    entries[index] = oldList[index];	} // end doubleArray		private int locateIndex(Object key)	{ 		// sequential search		Comparable cKey = (Comparable) key;		int index = 0;		while ( (index < currentSize) &&				cKey.compareTo(entries[index].getKey()) > 0 ) 			index++;		return index;	} // end locateIndex		private void makeRoom(int keyIndex)	{		// move each entry to next higher position beginning at end of list		// and continuing until item at newPosition is moved		for (int index = currentSize - 1; index >= keyIndex; index--)		{			entries[index+1] = entries[index]; // shift right		} // end for	} // end makeRoom           	private void removeArrayElement(int keyIndex)	{		for (int fromIndex = keyIndex+1; fromIndex < currentSize; fromIndex++)		{		  entries[fromIndex-1] = entries[fromIndex]; // shift left		} // end for	}  // end removeArrayElement		public void display()	{		for (int index = 0; index < currentSize; index++)		{			System.out.println(entries[index].getKey() + " " + entries[index].getValue());		} // end for		System.out.println();	} // end display	private class KeyIterator implements Iterator	{		private int currentIndex;				private KeyIterator()		{			currentIndex = 0;		} // end default constructor		// methods are public to match the interface Iterator 		public boolean hasNext() 		{			return currentIndex < currentSize;		} // end hasNext				public Object next()		{			Object result = null;						if (hasNext())			{				Entry currentEntry = (Entry) entries[currentIndex];				result = currentEntry.getKey();				currentIndex++;			}			else			{				throw new NoSuchElementException();			}					return result;		} // end next				public void remove()		{			throw new UnsupportedOperationException(); // java.lang		} // end remove	} // end KeyIterator 		private class ValueIterator implements Iterator	{		private int currentIndex;				private ValueIterator()		{			currentIndex = 0;		} // end default constructor		// methods are public to match the interface Iterator 		public boolean hasNext() 		{			return currentIndex < currentSize;		} // end hasNext				public Object next()		{			Object result = null;						if (hasNext())			{				Entry currentEntry = (Entry) entries[currentIndex];				result = currentEntry.getValue();				currentIndex++;			}			else			{				throw new NoSuchElementException();			}					return result;		} // end next				public void remove()		{			throw new UnsupportedOperationException(); // java.lang		} // end remove	} // end getValueIterator	private class Entry implements java.io.Serializable 	{		private Object key;		private Object value;		private Entry(Object searchKey, Object dataValue)		{			key = searchKey;			value = dataValue;		} // end constructor		private Object getKey()		{			return key;		} // end getKey		private Object getValue()		{			return value;		} // end getValue		private void setValue(Object dataValue)		{			value = dataValue;		} // end setValue	} // end Entry} // end SortedDictionary