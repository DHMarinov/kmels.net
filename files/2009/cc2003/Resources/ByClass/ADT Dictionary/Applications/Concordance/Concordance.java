import java.io.*;import java.util.*;public class Concordance{	private DictionaryInterface wordTable;		private static final String DELIMITERS = ".?!,;: \n\r\t";		public Concordance() 	{		wordTable = new SortedLinkedDictionary();	}  // end default constructor	// Seg. 17.14	public void readFile(BufferedReader dataFile) throws IOException	{		ListWithIteratorInterface numberList;		int lineNumber = 1;		String line = dataFile.readLine();		while (line != null)		{			line = line.toLowerCase();			StringTokenizer tokenizer = new StringTokenizer(line, DELIMITERS);			while (tokenizer.hasMoreTokens())			{				String word = (String)tokenizer.nextToken();				Object value = wordTable.getValue(word);				if (value == null)				{ // create list for new word; add list and word to index					numberList = new LinkedListWithIterator();					wordTable.add(word, numberList);				}				else				{ // retrieve list for existing word					numberList = (LinkedListWithIterator)value;				} // end if				// add line number to end of list so list is sorted				numberList.add(new Integer(lineNumber));			} // end while			lineNumber++;			line = dataFile.readLine();		} // end while		dataFile.close();	} // end readFile		// Seg. 17.15	public void display()	{		Iterator keyIterator = wordTable.getKeyIterator();		Iterator valueIterator = wordTable.getValueIterator();		while (keyIterator.hasNext())		{			// display the word			System.out.print(keyIterator.next() + " "); 			// get line numbers and iterator			ListWithIteratorInterface numberList = 			                     (LinkedListWithIterator) valueIterator.next();			Iterator listIterator = numberList.getListIterator();			// display line numbers			while (listIterator.hasNext())				System.out.print(listIterator.next() + " ");			System.out.println();		} // end while	} // end display	}  // end Concordance