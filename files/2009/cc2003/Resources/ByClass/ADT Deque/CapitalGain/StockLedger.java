public class StockLedger{	private DequeInterface ledger;		public StockLedger()	{		ledger = new LinkedDeque();	} // end default constructor		/*********************************************************	 * Task: Records a stock purchase in the ledger.	Ê*Ê@param sharesBought the number of shares purchased	Ê*Ê@param pricePerShare the price per share	 */ 	public void buy(int sharesBought, double pricePerShare)	{		StockPurchase purchase = new StockPurchase(sharesBought, pricePerShare);		ledger.addToBack(purchase);	} // end buy		/*********************************************************		 * Task: Removes sold shares from the ledger and computes the	 * capital gain or loss.	Ê*Ê@param sharesSold the number of shares sold	Ê*Ê@param pricePerShare the price per share	 * @return the capital gain (loss)	 */ 	public double sell(int sharesSold, double pricePerShare)	{		double saleAmount = sharesSold * pricePerShare;		double totalCost = 0;				while (sharesSold > 0)		{			StockPurchase transaction = (StockPurchase) ledger.removeFront();			double shareCost = transaction.getCostPerShare();			int numberOfShares = transaction.getNumberOfShares();						if (numberOfShares > sharesSold)			{				totalCost = totalCost + sharesSold * shareCost;				int numberPutBack = numberOfShares - sharesSold; // amt to put back				StockPurchase leftOver = new StockPurchase(numberPutBack, shareCost);				ledger.addToFront(leftOver); // put back at front of deque				// Assertion: loop will exit			}			else				totalCost = totalCost + numberOfShares * shareCost;						sharesSold = sharesSold - numberOfShares;		} // end while				return saleAmount - totalCost; // gain or loss	} // end sell} // end StockLedger