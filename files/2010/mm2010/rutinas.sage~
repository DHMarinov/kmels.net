#Autor: kmels

#Taylor P(x) = \sum { k=0, n } (f^k(x_0)/k!) * (x-x_0)^k
def NewtonRaphson(e,seed,f,f_): #seed es x_0, f_ es derivada
    next = seed - f(seed)/f_(seed)
    print "x_i=",next.n(digits=9), "f(x_i)=" , f(seed).n(digits=9), " f'(x)=", f_(seed)
    if abs(next-seed)<e:
        return next
    else:
        return NewtonRaphson(e,next,f,f_)
        
def NewtonRaphsonOptimizado(e,seed,f,f_):
    exactitud = 6
    next = (seed - f(seed/f_(seed))).n(digits)
    print "x_i: ",next.n(digits=exactitud), "f(x_i):" , f(seed).n(digits=exactitud) 
    if abs(next-seed)<e:
        return next
    else:
        return NewtonRaphson(e,next,f,f_).n(digits=exactitud)

def NewtonRaphsonLibro(p0,e,numeroIteraciones,f,f_):
    i = 1
    while (i<=numeroIteraciones):
        p = p0 - f(p0)/f_(p0)
        print "x_i: ",p.n(digits=exactitud), "f(x_i):" , f(p).n(digits=exactitud)
        if abs(p-p0) < e:
            print "Encontro, x: ", p, " f(x): ", f(p), "f'(x)" , f_(p)
            return p
        i = i+1
        p0 = p
    print "Metodo no encontro nada"

def NewtonRaphsonCerosMultiples(p0, e, numeroIteraciones, f, f_):
	exactitud = 10
	i=1
	f__(x)= derivative(f_)
	while(i <=numeroIteraciones):
		arriba = f(p0)/f_(p0)
		abajo = (f__(p0)**2 - f(p0)*f__(p0))
		p = p0 - (  arriba/abajo  )
		#p = p0 - (f(p0)*f_(p0))/(f_(p0)^2-f(p0)*f__(p0))
		print "x_i: ", p.n(digits=exactitud), "f(x_i):", f(p).n(digits=exactitud)
		if abs(p-p0)< e:
			print "Encontro, x: ", p, " f(x): ", f(p), "f'(x)" , f_(p)
			return p
		i=i+1
		p0=p
	print " Metodo no encontro nada"

def NewtonRaphsonCerosMultiplesOptimizado(p0, e, numeroIteraciones, f, f_):
	exactitud = 10
	i=1
	f__(x)= derivative(f_)
	while(i <=numeroIteraciones):
		arriba = f(p0)/f_(p0)
		abajo = (f__(p0)**2 - f(p0)*f__(p0))
		p = (p0 - (  arriba/abajo  )).n(digits=exactitud)
		print "x_i: ", p.n(digits=exactitud), "f(x_i):", f(p).n(digits=exactitud)
		if abs(p-p0)< e:
			print "Encontro, x: ", p, " f(x): ", f(p), "f'(x)" , f_(p)
			return p
		i=i+1
		p0=p
	print " Metodo no encontro nada"

def PuntoFijo(G,x0,e):
    while abs(G(x0)-x0) > e:
        print "x_i: " , x0, " G(x_i): ", G(x0)        
        x0 = G(x0)
    return x0


#Punto fijo, que avisa si la sucesion de numeros dada la ecuacion de recurrencia G(x) no es una contraccion, i.e. si | G'(x) | >= 1. Hay que mandarle la derivada de G(x), i.e. G_ en el parametro 
def PuntoFijoAPruebaDeMuladas(G,G_,x0,e):
    if abs(G_(x0)) >= 1:
        print "Esta funcion G(x) esta tricky, la derivada evaluada en x=",x, " es mayor que 1, por lo que se podria salir de la recta f(x)=x y no converger"
    else:
        print "x_i: " , x0, " G(x_i): ", G(x0)        
        x0 = G(x0)
    return x

def BiseccionLibro(f,xmin,xmax,e,numeroMaximoIteraciones):
    contador = 1 
    if (xmin >= xmax):
        print "MULA, manda bien los parametros"
    else:
        if (f(xmax)*f(xmin) > 1):
            print "Mal intevalo, no hay cambi de signo"
        else:
            while(contador <= numeroMaximoIteraciones):
                puntoMedio = xmin + (xmax-xmin)/2
                print "x: ", puntoMedio.n(digits=6), " f(x)", f(puntoMedio).n(digits=6)
                if ((f(puntoMedio) == 0) or ((xmax-xmin)/2 < e)):
                    print "Encajono x: " , puntoMedio, " f(x)", f(puntoMedio)
                    return puntoMedio
                contador = contador + 1
                if f(xmin)*f(puntoMedio) > 0:
                    xmin = puntoMedio
                else:
                    xmax = puntoMedio
        print "No hubieron suficientes iteraciones"

def secanteLibro(f,x0,x1,e,numeroIteraciones):
    contador = 2
    fx0 = f(x0)
    fx1 = f(x1)

    while (contador <= numeroIteraciones):
        nextX = x1 - fx1*(x1-x0)/(fx1-fx0)
        print "next x: ", nextX.n(digits=6) , " f(x)", f(nextX).n(digits=6)
        if (abs(nextX-x1) < e):
            print "Encontro! x:", nextX , " f(x): ",f(nextX)
            return nextX
        print "paso"
        contador = contador + 1        
        x0 = x1
        fx0 = fx1
        x1 = nextX
        fx1 = f(nextX)

    print "No encontro!"

#funcion que no tiene mucha exactitud en los puntos flotantes
def secanteLibroOptimizada(f,x0,x1,e,numeroIteraciones):
    contador = 2
    exactitud = 1000
    juanferGay = 6 #numero de decimales a imprimir
    fx0 = f(x0).n(digits=exactitud)
    fx1 = f(x1).n(digits=exactitud)

    while (contador <= numeroIteraciones):
        nextX = (x1 - fx1*(x1-x0)/(fx1-fx0)).n(digits=exactitud)
        print "next x: ", nextX.n(digits=juanferGay) , " f(x)", f(nextX).n(digits=juanferGay)
        if (abs(nextX-x1) < e):
            print "Encontro! x:", nextX.n(digits=juanferGay) , " f(x): ",f(nextX).n(digits=juanferGay)
            return nextX
        print "paso"
        contador = contador + 1
        x0 = x1.n(digits=exactitud)
        fx0 = fx1.n(digits=exactitud)
        x1 = nextX.n(digits=exactitud)
        fx1 = f(nextX).n(digits=exactitud)

    print "No encontro!"


def muller(f,x0,x1,x2,e,numeroIteraciones):
    h1 = x1 - x0
    h2 = x2 - x1
    sigma1 = (f(x1)-f(x0))/h1
    sigma2 = (f(x2)-f(x1))/h2
    d = (sigma2-sigma1)/(h2+h1)
    i = 2

    while (i<=numeroIteraciones):
        b = sigma2 + h2*d
        D = sqrt(b**2-4*f(x2)*d)# NOTE: May be complex arithmetic

        E = 0 #para inicialiarla en el ambiente
        if abs(b-D) < abs(b+d):
            E = b + D
        else:
            E = b - D
            
        h = -2*f(x2)/E
        p = x2 + h
        print "proximo x: ", p , " f(x)", f(p)
        if abs(h) < e:
            print "Encontro! x: ", p , " f(x)" , f(p)
            return p
        x0 = x1
        x1 = x2
        x2 = p
        h1 = x1 - x0
        h2 = x2 - x1
        sigma1 = (f(x1)-f(x0))/h1
        sigma2 = (f(x2)-f(x1))/h2
        d = (sigma2-sigma1)/(h2+h1)
        i = i + 1
    print "No encontro"

def mullerOptimizado(f,x0,x1,x2,e,numeroIteraciones):
    exactitud = 6
    h1 = (x1 - x0).n(digits=exactitud)
    h2 = (x2 - x1).n(digits=exactitud)
    sigma1 = ((f(x1)-f(x0))/h1).n(digits=exactitud)
    sigma2 = ((f(x2)-f(x1))/h2).n(digits=exactitud)
    d = (sigma2-sigma1)/(h2+h1).n(digits=exactitud)
    i = 2

    while (i<=numeroIteraciones):
        b = (sigma2 + h2*d).n(digits=exactitud)
        D = sqrt(b**2-4*f(x2)*d).n(digits=exactitud)# NOTE: May be complex arithmetic

        E = 0 #para inicialiarla en el ambiente
        if abs(b-D) < abs(b+d):
            E = (b + D).n(digits=exactitud)
        else:
            E = (b - D).n(digits=exactitud)
            
        h = (-2*f(x2)/E).n(digits=exactitud)
        p = (x2 + h).n(digits=exactitud)
        print "proximo x: ", p.n(digits=exactitud) , " f(x)", f(p).n(digits=exactitud)
        if abs(h) < e:
            print "Encontro! x: ", p.n(digits=exactitud) , " f(x)" , f(p).n(digits=exactitud)
            return p
        x0 = x1
        x1 = x2
        x2 = p
        h1 = x1 - x0
        h2 = x2 - x1
        sigma1 = ((f(x1)-f(x0))/h1).n(digits=6)
        sigma2 = ((f(x2)-f(x1))/h2).n(digits=6)
        d = ((sigma2-sigma1)/(h2+h1)).n(digits=6)
        i = i + 1
    print "No encontro"

#Steffensen es parecido al de Aitken: al aplicarle el metodo de aitken a una secuencia que converge linealmente PARA PUNTO FIJO, podemos acelerar la convergencia a cuadratica. Pagina 80 de Burden

#OJO, hay que mandar G(x) tal que el problema sea G(x) = x i.e. como punto fijo y no G(x) tal que el problema sea G(x) = 0
def steffensen(g,p0,e,numeroIteraciones):
    i = 1
    while (i<=numeroIteraciones):
        p1 = g(p0)
        p2 = g(p1)
        p = p0 - (p1-p0)**2/(p2-2*p1+p0)
        if abs(p-p0)< e :
            print "Encontro x:", p.n(digits=6) , " f(x)", f(p)
            return p
        
        i = i +1
        p0 = p
    print "No encontro nada!"

def steffensenOptimizada(g,p0,e,numeroIteraciones):
    exactitud = 6
    i = 1
    while (i<=numeroIteraciones):
        p1 = g(p0).n(digits=exactitud)
        p2 = g(p1).n(digits=exactitud)
        p = (p0 - (p1-p0)**2/(p2-2*p1+p0)).n(digits=exactitud)
        if abs(p-p0) < e:
            print "Encontro x: ", p.n(digits=exactitud)," f(x)", f(p)
            return p
        i = i + 1
        p0 = p
    print "No encontro nada"

def NewtonRaphsonGeneralizadoParaComplejos(f1,f2,xi,yi,tolerancia):
    #derivadas parciales
    f1x(x,y) = derivative(f1,x)
    f1y(x,y) = derivative(f1,y)
    f2x(x,y) = derivative(f2,y)
    f2y(x,y) = derivative(f2,y)
    print "xi : ", xi, " yi: ", yi , " f1x: ", f1x, " f2x: ", f2x, " f1y: ", f1y, " f2y: ", f2y
    DeltaXi = var('DeltaXi')
    DeltaYi = var('DeltaYi')
    ecuacion1 = f1x(xi,yi)*DeltaXi + f1y(xi,yi)*DeltaYi == -f1(xi,yi)
    ecuacion2 = f2x(xi,yi)*DeltaXi + f2y(xi,yi)*DeltaYi == -f2(xi,yi)
    print "ecuacion1: ", ecuacion1 , "\necuacion2: ",ecuacion2
    sistema = [ecuacion1,ecuacion2]
    soluciones = solve(sistema,DeltaXi,DeltaYi,solution_dict=True)[0]
    dxi = soluciones[DeltaXi].n(digits=6)
    dyi = soluciones[DeltaYi].n(digits=6)
    xi_next = xi + dxi
    yi_next = yi + dyi
    print "dxi: ", dxi, " dyi: ", dyi
    print "xi_next: ", xi_next, " yi_next: ", yi_next
    maximo = max(abs(dxi),abs(dyi))
    if (maximo < tolerancia):
        return xi_next,yi_next
    else:
        NewtonRaphsonGeneralizadoParaComplejos(f1,f2,xi_next,yi_next,tolerancia)
